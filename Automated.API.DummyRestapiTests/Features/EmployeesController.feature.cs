// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Automated.API.DummyRestapiTests.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class EmployeesControllerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "EmployeesController.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "EmployeesController", null, ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "EmployeesController")))
            {
                global::Automated.API.DummyRestapiTests.Features.EmployeesControllerFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0100 I try to GET employee list. When I try get list, it should return Ok")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        public void _0100ITryToGETEmployeeList_WhenITryGetListItShouldReturnOk()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0100 I try to GET employee list. When I try get list, it should return Ok", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
  testRunner.When("I call the get all employees action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 5
  testRunner.Then("it should return 200", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 6
     testRunner.And("raw response message should contain \'\"status\":\"success\"\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        public virtual void _0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode(string id, string expectedStatusCode, string expectedResponseMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("Expected Status Code", expectedStatusCode);
            argumentsOfScenario.Add("Expected Response Message", expectedResponseMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0200 I try to GET employee by Id. When I try get employee, it should return relat" +
                    "ed status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 8
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 9
 testRunner.Given(string.Format("model \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 10
  testRunner.When("I call the get employee by id action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 11
  testRunner.Then(string.Format("it should return {0}", expectedStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 12
     testRunner.And(string.Format("raw response message should contain {0}", expectedResponseMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0200 I try to GET employee by Id. When I try get employee, it should return relat" +
            "ed status code: -1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Id", "-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'\"status\":\"success\",\"data\":null\'")]
        public void _0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode_1()
        {
#line 8
this._0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode("-1", "200", "\'\"status\":\"success\",\"data\":null\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0200 I try to GET employee by Id. When I try get employee, it should return relat" +
            "ed status code: 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Id", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'{\"status\":\"success\",\"data\":{\"id\":2\'")]
        public void _0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode_2()
        {
#line 8
this._0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode("2", "200", "\'{\"status\":\"success\",\"data\":{\"id\":2\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0200 I try to GET employee by Id. When I try get employee, it should return relat" +
            "ed status code: 15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Id", "15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'{\"status\":\"success\",\"data\":{\"id\":15\'")]
        public void _0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode_15()
        {
#line 8
this._0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode("15", "200", "\'{\"status\":\"success\",\"data\":{\"id\":15\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0200 I try to GET employee by Id. When I try get employee, it should return relat" +
            "ed status code: 332")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "332")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Id", "332")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "404")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'Not found\'")]
        public void _0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode_332()
        {
#line 8
this._0200ITryToGETEmployeeById_WhenITryGetEmployeeItShouldReturnRelatedStatusCode("332", "404", "\'Not found\'", ((string[])(null)));
#line hidden
        }
        
        public virtual void _0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode(string index, string employeeObject, string expectedStatusCode, string expectedResponseMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Index", index);
            argumentsOfScenario.Add("Employee Object", employeeObject);
            argumentsOfScenario.Add("Expected Status Code", expectedStatusCode);
            argumentsOfScenario.Add("Expected Response Message", expectedResponseMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0300 I try to CREATE employee. When I try create employee, it should return relat" +
                    "ed status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 20
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 21
 testRunner.Given(string.Format("{0} model", employeeObject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 22
  testRunner.When("I call the Create employee action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
  testRunner.Then(string.Format("it should return {0}", expectedStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 24
     testRunner.And(string.Format("raw response message should contain {0}", expectedResponseMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0300 I try to CREATE employee. When I try create employee, it should return relat" +
            "ed status code: 01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'\'")]
        public void _0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode_01()
        {
#line 20
this._0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode("01", "\'\'", "400", "\'\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0300 I try to CREATE employee. When I try create employee, it should return relat" +
            "ed status code: 02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"name\":\"\",    \"salary\":0,\"age\":0}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'\'")]
        public void _0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode_02()
        {
#line 20
this._0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode("02", "\'{\"name\":\"\",    \"salary\":0,\"age\":0}\'", "400", "\'\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0300 I try to CREATE employee. When I try create employee, it should return relat" +
            "ed status code: 03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"name\":\"test\",\"salary\":0,\"age\":0}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'\'")]
        public void _0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode_03()
        {
#line 20
this._0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode("03", "\'{\"name\":\"test\",\"salary\":0,\"age\":0}\'", "400", "\'\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0300 I try to CREATE employee. When I try create employee, it should return relat" +
            "ed status code: 04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"name\":\"test\",\"salary\":12230,\"age\":0}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'\'")]
        public void _0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode_04()
        {
#line 20
this._0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode("04", "\'{\"name\":\"test\",\"salary\":12230,\"age\":0}\'", "400", "\'\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0300 I try to CREATE employee. When I try create employee, it should return relat" +
            "ed status code: 05")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "05")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "05")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"name\":\"test\",\"salary\":12230,\"age\":30}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'{\"status\":\"success\",\"data\":{\"\'")]
        public void _0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode_05()
        {
#line 20
this._0300ITryToCREATEEmployee_WhenITryCreateEmployeeItShouldReturnRelatedStatusCode("05", "\'{\"name\":\"test\",\"salary\":12230,\"age\":30}\'", "200", "\'{\"status\":\"success\",\"data\":{\"\'", ((string[])(null)));
#line hidden
        }
        
        public virtual void _0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode(string index, string employeeObject, string expectedStatusCode, string expectedResponseMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Index", index);
            argumentsOfScenario.Add("Employee Object", employeeObject);
            argumentsOfScenario.Add("Expected Status Code", expectedStatusCode);
            argumentsOfScenario.Add("Expected Response Message", expectedResponseMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0400 I try to UPDATE employee. When I try update employee, it should return relat" +
                    "ed status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 33
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 34
 testRunner.Given(string.Format("{0} model", employeeObject), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
  testRunner.When("I call the Update employee action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 36
  testRunner.Then(string.Format("it should return {0}", expectedStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 37
     testRunner.And(string.Format("raw response message should contain {0}", expectedResponseMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0400 I try to UPDATE employee. When I try update employee, it should return relat" +
            "ed status code: 01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "01")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "405")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'The PUT method is not supported for this route\'")]
        public void _0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode_01()
        {
#line 33
this._0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode("01", "\'\'", "405", "\'The PUT method is not supported for this route\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0400 I try to UPDATE employee. When I try update employee, it should return relat" +
            "ed status code: 02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "02")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"id\": 0,  \"name\":\"\",    \"salary\":0,    \"age\":0}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "404")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'Not found\'")]
        public void _0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode_02()
        {
#line 33
this._0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode("02", "\'{\"id\": 0,  \"name\":\"\",    \"salary\":0,    \"age\":0}\'", "404", "\'Not found\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0400 I try to UPDATE employee. When I try update employee, it should return relat" +
            "ed status code: 03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "03")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"id\": 10, \"name\":\"\",    \"salary\":0,    \"age\":0}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'Bad Request. Name is invalid\'")]
        public void _0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode_03()
        {
#line 33
this._0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode("03", "\'{\"id\": 10, \"name\":\"\",    \"salary\":0,    \"age\":0}\'", "400", "\'Bad Request. Name is invalid\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0400 I try to UPDATE employee. When I try update employee, it should return relat" +
            "ed status code: 04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "04")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"id\": 10, \"name\":\"test\",\"salary\":0,    \"age\":0}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'Bad Request. Salary is invalid\'")]
        public void _0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode_04()
        {
#line 33
this._0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode("04", "\'{\"id\": 10, \"name\":\"test\",\"salary\":0,    \"age\":0}\'", "400", "\'Bad Request. Salary is invalid\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0400 I try to UPDATE employee. When I try update employee, it should return relat" +
            "ed status code: 05")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "05")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "05")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"id\": 10, \"name\":\"test\",\"salary\":12000,\"age\":0}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "400")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'Bad Request. Age is invalid\'")]
        public void _0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode_05()
        {
#line 33
this._0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode("05", "\'{\"id\": 10, \"name\":\"test\",\"salary\":12000,\"age\":0}\'", "400", "\'Bad Request. Age is invalid\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0400 I try to UPDATE employee. When I try update employee, it should return relat" +
            "ed status code: 06")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "06")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Index", "06")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Employee Object", "\'{\"id\": 10, \"name\":\"test\",\"salary\":12230,\"age\":30}\'")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'{\"status\":\"success\",\"data\":{\'")]
        public void _0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode_06()
        {
#line 33
this._0400ITryToUPDATEEmployee_WhenITryUpdateEmployeeItShouldReturnRelatedStatusCode("06", "\'{\"id\": 10, \"name\":\"test\",\"salary\":12230,\"age\":30}\'", "200", "\'{\"status\":\"success\",\"data\":{\'", ((string[])(null)));
#line hidden
        }
        
        public virtual void _0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode(string id, string expectedStatusCode, string expectedResponseMessage, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("Id", id);
            argumentsOfScenario.Add("Expected Status Code", expectedStatusCode);
            argumentsOfScenario.Add("Expected Response Message", expectedResponseMessage);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("0500 I try to DELETE employee by Id. When I try delete employee, it should return" +
                    " related status code", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 47
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 48
 testRunner.Given(string.Format("model \'{0}\'", id), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 49
  testRunner.When("I call the delete employee by id action", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 50
  testRunner.Then(string.Format("it should return {0}", expectedStatusCode), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 51
     testRunner.And(string.Format("raw response message should contain {0}", expectedResponseMessage), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "* ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0500 I try to DELETE employee by Id. When I try delete employee, it should return" +
            " related status code: -1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Id", "-1")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "404")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'Not found\'")]
        public void _0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode_1()
        {
#line 47
this._0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode("-1", "404", "\'Not found\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0500 I try to DELETE employee by Id. When I try delete employee, it should return" +
            " related status code: 332")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "332")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Id", "332")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "404")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'Not found\'")]
        public void _0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode_332()
        {
#line 47
this._0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode("332", "404", "\'Not found\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0500 I try to DELETE employee by Id. When I try delete employee, it should return" +
            " related status code: 2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Id", "2")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'{\"status\":\"success\",\"data\":\"2\",\"message\":\"Successfully! Record has been deleted\"" +
            "}\'")]
        public void _0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode_2()
        {
#line 47
this._0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode("2", "200", "\'{\"status\":\"success\",\"data\":\"2\",\"message\":\"Successfully! Record has been deleted\"" +
                    "}\'", ((string[])(null)));
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("0500 I try to DELETE employee by Id. When I try delete employee, it should return" +
            " related status code: 15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "EmployeesController")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("VariantName", "15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Id", "15")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Status Code", "200")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("Parameter:Expected Response Message", "\'{\"status\":\"success\",\"data\":\"15\",\"message\":\"Successfully! Record has been deleted" +
            "\"}\'")]
        public void _0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode_15()
        {
#line 47
this._0500ITryToDELETEEmployeeById_WhenITryDeleteEmployeeItShouldReturnRelatedStatusCode("15", "200", "\'{\"status\":\"success\",\"data\":\"15\",\"message\":\"Successfully! Record has been deleted" +
                    "\"}\'", ((string[])(null)));
#line hidden
        }
    }
}
#pragma warning restore
#endregion
